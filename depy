#!/usr/bin/env bash

set -e

start=`date +%s`

ARG=$1
TARGET=$2
SKIP_PRE_HOOK=0
SKIP_REMOTE_HOOK=0
SKIP_POST_HOOK=0
PROGRESS=0
VERBOSE=0
INCREMENTAL=0
BETA=0
DEV=0

for argument in "$@"; do
    case "${argument}" in
        -spr|--skip-pre) SKIP_PRE_HOOK=1 ;;
        -sr|--skip-remote) SKIP_REMOTE_HOOK=1 ;;
        -spo|--skip-post) SKIP_POST_HOOK=1 ;;
        -p|--progress) PROGRESS=1 ;;
        -v|--verbose) VERBOSE=1 ;;
        -vv|--vverbose) VERBOSE=2 ;;
        -i|--incremental) INCREMENTAL=1 ;;
           --beta) BETA=1 ;;
           --dev) DEV=1 ;;
    esac
done

function success {
    echo -e "\033[0;32m$1\033[0m"
}

function error {
    echo -e "\033[0;31m$1\033[0m"
}

function announce {
    local width=${#1}
    local padding=5
    local total=$(($padding+$width+$padding))
    printf "\033[$2m%-${total}.${total}s\033[0m\n"
    printf "\033[$2m%-${padding}.${padding}s"; echo -n $1; printf "\033[$2m%-${padding}.${padding}s\033[0m\n";
    printf "\033[$2m%-${total}.${total}s\033[0m\n"
}

function successBig {
    announce $1 '7;32'
}

function errorBig {
    announce $1 '0;30;41'
}

# Check for dependencies
#
if ! which rsync > /dev/null; then
    error "Cannot find rsync binary"
    exit 1
fi
if ! which ssh > /dev/null; then
    error "Cannot find ssh binary"
    exit 1
fi
if ! which zip > /dev/null; then
    error "Cannot find zip binary"
    exit 1
fi

function getLink() {
    ls -l $1 | awk '{print $11}'
}

function readLinkRecursive() {
    local src tmp

    src=$(getLink $1)

    while true; do
        tmp=$(getLink ${src})
        if [ -z "$tmp" ]; then
            break
        else
            src=$(getLink ${tmp})
        fi
    done

    echo ${src};
}

DEPY_DIR=$(dirname $(readLinkRecursive "$0"))

function showHelp {
    cat ${DEPY_DIR}/help | less
    exit 1
}

# Check if target server argument is passed in
#
function checkInitialization {
    if [ ! -f .depy ]; then
        error "Depy configuration not found!"
        error "To initialize Depy run: depy init"
        exit 1
    fi
}

# Load configurations
#
function loadConfig {
    checkInitialization

    # Parse all variables except shared array
    source <(cat .depy | grep -v 'shared.*(.*)' | sed '/shared.*(/,/)/d' | sed 's/ *= */=/g')

    # Parse shared array
    sharedList=$(cat .depy | grep -v 'shared.*(.*)' | sed -n "/shared.*(/,/)/p" | grep -v 'shared.*(' | grep -v ')' | sed '/^$/d' | sed -e 's/^[ \t]*//')

    [ ! -d "${deploy_target}" ] && error "Missing deploy target -> ${deploy_target}" && exit 1
    DEPLOY_DIR="${deploy_target}"
}

# Load and validate configuration for target server
#
function loadConfigForServer {
    if [ -z "$TARGET" ]; then
        error "Missing server name!"
        exit 1
    fi

    loadConfig

    SERVER_HOST="${TARGET}_host"
    [ -z "${!SERVER_HOST}" ] && error "Missing host for server ${TARGET}" && exit 1

    SERVER_PORT="${TARGET}_port"
    [ -z "${!SERVER_PORT}" ] && error "Missing port for server ${TARGET}" && exit 1

    SERVER_USER="${TARGET}_user"
    [ -z "${!SERVER_USER}" ] && error "Missing user for server ${TARGET}" && exit 1

    SERVER_KEY="${TARGET}_key"
    [ -z "${!SERVER_KEY}" ] && error "Missing key for server ${TARGET}" && exit 1

    SERVER_DIR="${TARGET}_dir"
    [ -z "${!SERVER_DIR}" ] && error "Missing directory for server ${TARGET}" && exit 1

    SERVER_HOST="${!SERVER_HOST}"
    SERVER_PORT="${!SERVER_PORT}"
    SERVER_USER="${!SERVER_USER}"
    SERVER_KEY="${!SERVER_KEY}"
    SERVER_DIR="${!SERVER_DIR}"
}

# Run each hook in a subprocess
# Prefix the hook with the file name
# Return hook exit status
#
function runHook {
    if [ ${VERBOSE} -gt 0 ]; then
        echo "+ . .depy-$1.sh "$2" ${INCREMENTAL} "$3" "$4""
    fi

    (. .depy-$1.sh "$2" ${INCREMENTAL} "$3" "$4" | sed "s/^/[local] /"; return ${PIPESTATUS[0]})
}

# Run remote command without any prefixes or changes
#
function remoteCmdRaw {
    ssh ${SERVER_USER}@${SERVER_HOST} -i "${SERVER_KEY}" -p ${SERVER_PORT} -n $@
}

# Run remote command without any prefixes or changes
#
function remoteScriptRaw {
    ssh ${SERVER_USER}@${SERVER_HOST} -i "${SERVER_KEY}" -p ${SERVER_PORT} $@
}

# Run remote command and prefix the output with the target server name
# Also forward the proper return code
#
function remoteCmd {
    local cmd=$1
    local server_release_dir=$2

    if [ "$cmd" = "remote" ]; then
        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + cd ${server_release_dir}; bash -s .depy-remote.sh ${INCREMENTAL} ${TARGET}"; fi
        (remoteScriptRaw "cd ${server_release_dir}; bash -s" < ".depy-remote.sh" ${INCREMENTAL} ${TARGET} | sed "s/^/[${TARGET}] /"; return ${PIPESTATUS[0]})
    else
        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + cd ${SERVER_DIR}; $cmd"; fi
        (remoteCmdRaw "cd ${SERVER_DIR}; $cmd" | sed "s/^/[${TARGET}] /"; return ${PIPESTATUS[0]})
    fi
}

# Generate release name
#
function releaseName {
    echo $(date -u +"%Y%m%d%H%M%S")
}

# Create symbolic link for the current release on the server
#
function link {
    remoteCmd "rm current; ln -s releases/${1} current"
}

# Create symbolic link from the specified release to current
#
function rollback {
    link "$1"
}

# Shortcut for zip command
#
function zipCommand {
    local quiet=$(if [ ${VERBOSE} -gt 1 ]; then echo "--verbose"; else echo "--quiet"; fi)
    local ignore=$([ -f .depyignore ] && echo "--exclude @.depyignore")

    [ ${VERBOSE} -gt 0 ] && set -x
    zip -9 --recurse-paths --symlinks ${quiet} "$@" --exclude @"${DEPY_DIR}/ignore" ${ignore}
    { set +x; } 2>/dev/null
}

# Pack the local files for release
#
function pack {
    if [ -z "$1" ]; then release=$(releaseName); else release=${1}; fi
    if [ -z "$2" ]; then path=''; else path="${2%/}/"; fi

    if [ -z "$3" ]; then
        zipCommand "${path}${release}.zip" "${DEPLOY_DIR}"
    else
        zipCommand "${path}${3}.zip" "${DEPLOY_DIR}" -DF --out "${path}${release}-i.zip"
    fi
}

function calculateProcessTime() {
    end=`date +%s`
    runtime=$((end-start))
    echo "Finished for ${runtime} seconds"
}

case "${ARG}" in
    init)
        [ -f .depy} ] && error "Depy is already initialized in this directory" && exit 1

        cp ${DEPY_DIR}/.depy .
        cp ${DEPY_DIR}/.depy-pre.sh .
        cp ${DEPY_DIR}/.depy-remote.sh .
        cp ${DEPY_DIR}/.depy-post.sh .
        cp ${DEPY_DIR}/.depyignore .

        success "Done"
    ;;

    setup)
        loadConfigForServer

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + which unzip"; fi
        if [ -z $(remoteCmdRaw "which unzip") ]; then
            error "Server ${TARGET} does not have unzip installed"
            exit 1
        fi

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ ! -w \"${SERVER_DIR}\" ] && echo 1"; fi
        if [ ! -z $(remoteCmdRaw "[ ! -w \"${SERVER_DIR}\" ] && echo 1") ]; then
            error "User ${SERVER_USER} does not have write access to directory ${SERVER_DIR}"
            exit 1
        fi

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ -d \"${SERVER_DIR}/releases\" ] && echo 1"; fi
        if [ -z $(remoteCmdRaw "[ -d \"${SERVER_DIR}/releases\" ] && echo 1") ]; then
            remoteCmd "mkdir releases"
        fi

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ -d \"${SERVER_DIR}/shared\" ] && echo 1"; fi
        if [ -z $(remoteCmdRaw "[ -d \"${SERVER_DIR}/shared\" ] && echo 1") ]; then
            remoteCmd "mkdir shared"
        fi

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ -L \"${SERVER_DIR}/current\" ] && echo 1"; fi
        if [ -z $(remoteCmdRaw "[ -L \"${SERVER_DIR}/current\" ] && echo 1") ]; then
            remoteCmd "ln -s /dev/null current"
        fi

        calculateProcessTime

        success "Done"
    ;;

    deploy)
        loadConfigForServer

        if [ ${VERBOSE} -gt 0 ]; then
            echo "[${TARGET}] + [ -w \"${SERVER_DIR}\" ] && [ -d \"${SERVER_DIR}/releases\" ] && [ -d \"${SERVER_DIR}/shared\" ] && [ -L \"${SERVER_DIR}/current\" ] && echo 1";
        fi
        if [ -z $(remoteCmdRaw "[ -w \"${SERVER_DIR}\" ] && [ -d \"${SERVER_DIR}/releases\" ] && [ -d \"${SERVER_DIR}/shared\" ] && [ -L \"${SERVER_DIR}/current\" ] && echo 1") ]; then
            error "Server ${TARGET} is not prepared for deployment. Try: depy setup ${TARGET}"
            exit 1
        fi

        failed=0
        remoteHooksFailed=0
        release=$(releaseName)

        rsyncProgress=$(if [ ${VERBOSE} -gt 0 ] || [ ${PROGRESS} -gt 0 ]; then echo "--progress"; fi)
        unzipQuiet=$(if [ ${VERBOSE} -lt 2 ]; then echo "-q"; fi)

        # Make sure tmp directory exists
        #
        if [ ! -d .depytmp ]; then
            mkdir .depytmp
            echo '*' > .depytmp/.gitignore
        fi

        # Run pre hook
        #
        if [ -f .depy-pre.sh ] && [ ${SKIP_PRE_HOOK} -eq 0 ]; then
            set +e
            echo "[local] Running pre hook"
            runHook "pre" ${release} ${failed} ${TARGET}
            if [ $? -ne 0 ]; then
                error "[local] Finished with error exit code"
                failed=1
                break
            fi
            set -e
        fi

        # Remote server work
        #
        if [ ${failed} -eq 0 ]; then
            cwd=${SERVER_DIR}
            server_dns=${SERVER_USER}@${SERVER_HOST}
            server_releases_dir=${SERVER_DIR}/releases/
            server_release_dir=${server_releases_dir}${release}

            if [ ${INCREMENTAL} -eq 1 ]; then
                latestRelease=$(ls -1r .depytmp | head -1 | sed -E 's/(.*)\.zip/\1/')
            fi

            if [ -z "${latestRelease}" ]; then
                [ ${INCREMENTAL} -eq 1 ] && echo "[${TARGET}] No previous release found. Proceeding as full deploy"

                echo "[local] Packing files"
                pack ${release} .depytmp

                echo "[local] Transferring packed files"
                [ ${VERBOSE} -gt 0 ] && set -x
                rsync --archive ${rsyncProgress} .depytmp/${release}.zip -e "ssh -p ${SERVER_PORT} -i ${SERVER_KEY}" ${server_dns}:${server_releases_dir}
                { set +x; } 2>/dev/null

                echo "[${TARGET}] Unpacking files"
                remoteCmd "unzip ${unzipQuiet} \"releases/${release}.zip\" -d \"releases/${release}\"; rm \"releases/${release}.zip\""
            else
                echo "[local] Packing files for incremental deploy"
                pack ${release} .depytmp ${latestRelease}

                if ! zipinfo .depytmp/${release}-i.zip > /dev/null; then
                    echo "[local] Incremental release pack is empty (no changes)"
                    rm .depytmp/${release}-i.zip
                    exit 0
                fi

                # Make full release pack of the current files
                # so it can be compated with the next incremental release
                #
                pack ${release} .depytmp

                echo "[${TARGET}] Preparing for incremental deploy"
                remoteCmd "cp -R ${server_releases_dir}${latestRelease} ${server_release_dir}"

                echo "[local] Transferring packed files"
                [ ${VERBOSE} -gt 0 ] && set -x
                rsync --archive ${rsyncProgress} .depytmp/${release}-i.zip -e "ssh -p ${SERVER_PORT} -i ${SERVER_KEY}" ${server_dns}:${server_releases_dir}
                rm .depytmp/${release}-i.zip
                { set +x; } 2>/dev/null

                echo "[${TARGET}] Unpacking files"
                remoteCmd "unzip -o ${unzipQuiet} \"releases/${release}-i.zip\" -d \"releases/${release}\"; rm \"releases/${release}-i.zip\""
            fi

            # Setup shared files and folders
            #
            echo "[${TARGET}] Setting up shared files"
            while read -r shared; do
                if [ -d "${shared}" ] || [ -f "${shared}" ]; then
                    if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ -e \"${SERVER_DIR}/shared/${shared}\" ] && echo 1"; fi
                    if [ -z $(remoteCmdRaw "[ -e \"${SERVER_DIR}/shared/${shared}\" ] && echo 1") ]; then
                        remoteCmd "mv \"releases/${release}/${shared}\" \"shared/${shared}\"; ln -s \"../../shared/${shared}\" \"releases/${release}/${shared}\""
                    else
                        remoteCmd "rm -rf \"releases/${release}/${shared}\"; ln -s \"../../shared/${shared}\" \"releases/${release}/${shared}\""
                    fi
                fi
            done <<< "$sharedList"

            # Run remote hook
            #
            if [ -f .depy-remote.sh ] && [ ${SKIP_REMOTE_HOOK} -eq 0 ]; then
                set +e
                echo "[${TARGET}] Running remote hook"
                remoteCmd "remote" ${server_release_dir}
                if [ $? -ne 0 ]; then
                    error "[${TARGET}] Finished with error exit code"
                    failed=1
                    remoteHooksFailed=1
                fi
                set -e
            fi
        fi

        # Skip if any of the pre or remote hooks failed
        #
        if [ ${failed} -eq 0 ]; then
            echo "[${TARGET}] Linking release as current"
            link "${release}"
        fi

        # Clean up old releases or remove failed release
        #
        if [ ${remoteHooksFailed} -eq 0 ]; then
            echo "[${TARGET}] Clean up old releases"
            remoteCmd "cd releases; ls | sort -r | sed '1,${keep_releases}d' | xargs rm -rf --"
        else
            echo "[${TARGET}] Remove failed release"
            remoteCmd "cd releases; ls | sort | tail -n 1 | xargs rm -rf --"
        fi

        # Run post hook
        #
        if [ -f .depy-post.sh ] && [ ${SKIP_POST_HOOK} -eq 0 ]; then
            set +e
            echo "[local] Running post hook"
            runHook "post" ${release} ${failed} ${TARGET}
            if [ $? -ne 0 ]; then
                error "[local] Finished with error exit code"
                failed=1
            fi
            set -e
        fi

        # Cleaning up local release packages
        #
        echo "[local] Cleaning up local release packages"
        [ ${VERBOSE} -gt 1 ] && set -x
        cd .depytmp
        ls | sort -r | tail -n +2 | xargs rm -rf --
        { set +x; } 2>/dev/null

        calculateProcessTime

        # Announce result of the operation
        #
        echo
        if [ ${failed} -eq 0 ] && [ $? -eq 0 ]; then
            successBig "Success"
        else
            errorBig "Failure"
        fi
        echo
    ;;

    releases)
        loadConfigForServer

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + cd ${SERVER_DIR}; ls releases"; fi
        remoteCmdRaw "cd ${SERVER_DIR}; ls releases"
    ;;

    rollback)
        loadConfigForServer

        release=$3

        if [ -z "${release}" ]; then
            release=$(remoteCmdRaw "cd releases; ls | sort | tail -n 2 | head -n 1")
            if [ -z "${release}" ]; then
                error "[${TARGET}] No previous release found"
            fi
        fi

        if [ ${VERBOSE} -gt 0 ]; then echo "[${TARGET}] + [ -d \"${SERVER_DIR}/releases/${release}\" ] && echo 1"; fi
        if [ ! -z $(remoteCmdRaw "[ -d \"${SERVER_DIR}/releases/${release}\" ] && echo 1") ]; then
            echo "[${TARGET}] Linking release ${release} as current"
            link "${release}"
        else
            error "[${TARGET}] Release ${release} not found"
        fi
    ;;

    pack)
        loadConfig
        pack
        calculateProcessTime
    ;;

    pack-list)
        loadConfig
        VERBOSE=2
        zipCommand -sf tmp.zip "${DEPLOY_DIR}"
    ;;

    update)
        cd ${DEPY_DIR}
        git fetch --tags

        if [ ${DEV} -eq 1 ]; then
            tag="master"
        elif [ ${BETA} -eq 1 ]; then
            tag=$(git tag | sort -t. -k 1.2,1n -k 2,2n -k 3,3n -k 4,4n | tail -1)
        else
            tag=$(git tag | sort -t. -k 1.2,1n -k 2,2n -k 3,3n -k 4,4n | grep -v "rc" | grep -v "alpha" | grep -v "beta" | tail -1)
        fi

        git checkout ${tag} -q
        success "Switched to version \"${tag}\""
    ;;

    *)
        showHelp
    ;;
esac
